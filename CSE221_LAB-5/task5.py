# -*- coding: utf-8 -*-
"""Task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11U1Jq-hfafCjyQcQYQmu9Lpy0s8OFYz9
"""



#Task-5
f1=open('/content/drive/MyDrive/CSE221_lab-05/Input5_1.txt',mode='r')
f2=open('/content/drive/MyDrive/CSE221_lab-05/Output5.txt',mode='w')
l1=f1.readline().split( )
n=int(l1[0])
e=int(l1[1])
num=int(l1[2])
d= {}
   
for i in range(e): 
  l2=f1.readline().split()
  a=int(l2[0]) 
  b=int(l2[1])
  for i in range(1,n+1):
    if i not in d:
      d[i]=[]
  if a in d:
    d[a].append(b)
  elif a not in d:
    d[a] = [b]
print(d) 

queue=[]
color={}  #visited/color
distance={}
parent={}
path=[]
def bfs(g,s,des):
  for k in g.keys():  
    color[k] = 0
  #print(color) #1,2,3,4 all vertices=0
  color[s]=1
  distance[s]=0
  parent[s]=None
  queue.append(s)
  
  while queue:
    u=queue.pop(0)
    
    for v in g[u]: #g[u]=g.values #v=adj/neighbour
      if color[v]==0:
        color[v]=1
        distance[v]=distance[u]+1
        parent[v]=u 
        queue.append(v) 
  
  while des is not None:
    path.append(str(des))
    des=parent[des]
  path.reverse()


bfs(d,1,num)
print(distance)

for k,v in distance.items():
  if num==k:
    print('Time:',v,file=f2)
print(f'Shortest Path:{" ".join(path)}',file=f2)