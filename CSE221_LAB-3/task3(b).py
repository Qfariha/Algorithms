# -*- coding: utf-8 -*-
"""Task3(b).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11U1Jq-hfafCjyQcQYQmu9Lpy0s8OFYz9
"""



#Task-3
#b. using heap sort
f1=open('/content/drive/MyDrive/CSE221_Lab-03/Input3.txt',mode='r')
f2=open('/content/drive/MyDrive/CSE221_Lab-03/Output3_2.txt',mode='w')


queue = []
def enqueue(arr):
  queue.append(arr)
  print(queue,'q')
  heapify(queue, len(queue)-1)

def heapify(arr,i):
  smallest = i 
    
  parent = i // 2 
  if len(arr[smallest])!=0:
    if parent >=0 and int(arr[smallest][1]) < int(arr[parent][1]):
      arr[smallest], arr[parent] = arr[parent], arr[smallest]
      smallest = parent
      heapify(arr, smallest)

def seeDoctor():
  if queue == []:
    return -1
  else:
    temp = queue[0]
    queue[0] = queue[len(queue)-1]  #Just like delete-> root will be removed,swap with leaf
    queue.pop()
    f2.write(temp[0]+'\n')
#         print('man')
    sink(queue, len(queue)-1, 0)
def sink(arr,n,k):
  l = 2*k+1
  r = 2*k+2
  if l < n and arr[l][1] < arr[k][1]:
    smallest = l
  else:
    smallest = k
  if r < n and arr[r][1] < arr[smallest][1]:
    smallest = r
  if smallest != k:
    arr[k], arr[smallest] = arr[smallest], arr[k]
    sink(arr,n, smallest)
def printQueue():
  read = f1.readline()
  while read!='':
    if read.strip()!= 'see doctor':
      read = read.split()
      enqueue(read)
      #print(read,'r')
    else:
      seeDoctor()
    read = f1.readline()
    #print(read,'READ')
printQueue()
f1.close()
f2.close()

#Time complexity O(nlog(n))
#Time complexity for heap sort is less than bubble sort