# -*- coding: utf-8 -*-
"""Task1(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11U1Jq-hfafCjyQcQYQmu9Lpy0s8OFYz9
"""



#Task-1_1
f1=open('/content/drive/MyDrive/CSE221_Lab-03/Input1_1.txt',mode='r')
f2=open('/content/drive/MyDrive/CSE221_Lab-03/Output1_1.txt',mode='w')
l1=f1.readline().split()
list1=[]
for num in l1:
  list1.append(int(num))
l=0
h=len(list1)-1
ans=[]

def partition(arr, low, high):
  # pivot (Element to be placed at right position)
  pivot = arr[high];  
  i = (low - 1)  # Index of smaller element and indicates the 
  # right position of pivot found so far
  for j in range (low, high+ 1):
    # If current element is smaller than the pivot
    if (arr[j] < pivot):
      i=i+1;    # increment index of smaller element
      arr[i],arr[j]=arr[j],arr[i]
  
  arr[i + 1],arr[high]=arr[high],arr[i+1]
  return (i + 1)
def quickSort(arr, low, high):
  if (low < high): 
    # pi is partitioning index, arr[pi] is now at right place 
    pi = partition(arr, low, high)
    quickSort(arr, low, pi-1)  # Before pi
    quickSort(arr, pi+1, high) # After pi
  #print(arr,"arr")
  return arr
quickSort(list1, l, h)
print(list1,'list1')
for num in list1:
  print(num,end=" ",file=f2)
f2.close()

#arr=[10,8,2,4,5,3,6]