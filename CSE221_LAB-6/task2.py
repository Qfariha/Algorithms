# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11U1Jq-hfafCjyQcQYQmu9Lpy0s8OFYz9
"""



#Task-2
import heapq as heapq
import math
f1=open('/content/drive/MyDrive/CSE221_Lab-6/Input2.txt',mode='r')
f2=open('/content/drive/MyDrive/CSE221_Lab-6/Output2.txt',mode='w')
l1=f1.readline().split( )
n=int(l1[0])
e=int(l1[1])
d= {}
for i in range(n+1):
    d[i]={i:0}

for i in range(e):
  
  l2=f1.readline().split()
  u=int(l2[0])
  v=int(l2[1])
  w=int(l2[2])
  if u not in d:
    d[u]={v:w}

  elif u in d:
    d[u][v] = w
 
print(d) 

s=f1.readline().split()
#print(s)  

def dijkstra(graph, source):
  
  distance={}
  
  for j in range(n+1):
    new={j:float('infinity')}
    distance.update(new)
    distance[source] = 0
  
    pq = [(0, source)]
    
  #print(distance)
  #print(pq,'pq')  
  while len(pq)!=0:
    c_distance, c_vertex = heapq.heappop(pq)
    if c_distance > distance[c_vertex]:
      continue
    #print(distance,'distance')
    for neighbour, dist in graph[c_vertex].items():
      #print(graph[c_vertex],'aaa')
      new_dist = c_distance + dist
      if distance[neighbour]>new_dist:
        distance[neighbour] = new_dist
        heapq.heappush(pq, (new_dist, neighbour))
        

  for k,v in distance.items():
    if v==float('infinity'):
      v=-1
  
  return distance

a=dijkstra(d,int(s[0]))
#print(a)
b=dijkstra(d,int(s[1]))
#print(b)
for k1,v1 in a.items():
  for k2,v2 in b.items():
    if k1==k2 and v1!=math.inf and v2!=math.inf and v1!=0 and v2!=0:
      print('Time:', max(v1,v2),file=f2)
      print('Node:',k2,file=f2)
f2.close()