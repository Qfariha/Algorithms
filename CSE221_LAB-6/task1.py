# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11U1Jq-hfafCjyQcQYQmu9Lpy0s8OFYz9
"""



#Task-1
import heapq as heapq
f1=open('/content/drive/MyDrive/CSE221_Lab-6/Input1.txt',mode='r')
f2=open('/content/drive/MyDrive/CSE221_Lab-6/Output1.txt',mode='w')
l1=f1.readline().split( )
n=int(l1[0])
e=int(l1[1])
d= {}
   
for i in range(e):
  
  l2=f1.readline().split()
  u=int(l2[0])
  v=int(l2[1])
  w=int(l2[2])

  d.update({0:{}})
  if u not in d:
    d[u]={v:w}

  elif u in d:
    d[u][v] = w
  
print(d) 

s=int(f1.readline())  

def dijkstra(graph, source):
  distance={}
  for j in graph:
    new={j:float('infinity')}
    distance.update(new)
    distance[source] = 0
    
    pq = [(0, source)]
    
    
  while len(pq)!=0:
    c_distance, c_vertex = heapq.heappop(pq)
    if c_distance > distance[c_vertex]:
      continue
    
    for neighbour, dist in graph[c_vertex].items():
      new_dist = c_distance + dist
      if distance[neighbour]>new_dist:
        distance[neighbour] = new_dist
        heapq.heappush(pq, (new_dist, neighbour))
        
    if distance[neighbour]==float('infinity'):
      distance[neighbour]=-1
  return distance


a=dijkstra(d,s)
for k,v in a.items():
  if k!=0:
    print(v,end=" ",file=f2)